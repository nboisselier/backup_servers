#!/usr/bin/env bash
#################################################################################
#
# NB 22.01.12
# https://github.com/nboisselier/backup_servers
# https://raw.githubusercontent.com/nboisselier/backup_servers/master/backup_servers
#
#################################################################################

#--------------------------------------
# Options
#--------------------------------------
BACKUP_DIR=""
SERVERS=""
DIRS=""
PARALLEL=1
RSYNC="rsync --archive --update --force --numeric-ids --relative --stats"
RSYNC_OPT=""
SSH_OPT=""
CONN_TIMEOUT=10 # seconds
RUN_TIMEOUT=0 # seconds
DU=0
NICE=0
PKG_LIST=1
NO_SERVER_DIR=0
CONF_PATTERN_DIR='*.conf'

NAME=`basename "$0"`
DEBUG=0
VERBOSE=0
DATE=`date +%Y%m%d-%H%M%S`
DRY_RUN=0

#--------------------------------------
# Functions
#--------------------------------------
usage() {
echo "
=head1 NAME

${NAME}

=head1 SYNOPSIS

Backup a list of directories combined with a list of directories

  --conf          Config file containing environment variables, Default:
    * BACKUP_DIR=$BACKUP_DIR
    * RSYNC_OPT=$RSYNC_OPT
    * SSH_OPT=$SSH_OPT
    * PARALLEL=$PARALLEL
    * CONN_TIMEOUT=$CONN_TIMEOUT
    * DIRS=$DIRS
    * SERVERS=$SERVERS
    * NO_SERVER_DIR=$NO_SERVER_DIR
    Need to be the first argument.

  --servers       Servers separated by a space
  --dirs          Dirs separated by a space
  --backup-dir    Default: (BACKUP_DIR=$BACKUP_DIR)

  --conn-timeout  Default: (CONN_TIMEOUT=$CONN_TIMEOUT)
  --run-timeout   Default: (RUN_TIMEOUT=$RUN_TIMEOUT)
  --parallel      Default: (PARALLEL=$PARALLEL)

  --rsync-opt     Set RSYNC_OPT
  -n,--dry-run
  --ssh-opt

  --no-server-dir Don't create server sub directory (default: NO_SERVER_DIR=$NO_SERVER_DIR)
  --[no-]du       Print directories size by server (default: DU=$DU)
  --[no-]pkg-list backup package list into /etc/*.backup (default: PKG_LIST=$PKG_LIST, only port and apt supported)
  --log2csv       [LOG_FILE|STDIN], Transform log into csv
  --log2err       [LOG_FILE|STDIN], Extract errors from log

  -v, --verbose   Default; $VERBOSE
      --debug     Default: $DEBUG, don't run rsync. Print directories found per servers.
                  Print rsync command to be run if DEBUG>1
  -h, --help      Print this help

=head1 EXAMPLES

Backup myserser:/etc into /opt/backup:

  $NAME --servers myserser --dir /etc --backup-dir /opt/backup

Backup a list of directories and servers from a conf file

  $NAME --conf /etc/$NAME.conf

Backup with csv stats output

  $NAME --conf /etc/$NAME.conf | $NAME --log2csv

Test a config:

  $NAME --conf /etc/$NAME.conf --debug

=head1 DESCRIPTION

See https://github.com/nboisselier/backup_servers.

=head1 LICENSE

Copyright (C) 2014 Nicolas Boisselier

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

See <http://www.gnu.org/licenses/>.

=head1 AUTHOR

Nicolas Boisselier nicolas.boisselier@gmail.com
"
}

is_locahost() {
  case $1 in
    127.0.0.1|localhost*) return 0 ;;
    `hostname -s`) return 0 ;;
    `hostname -f`) return 0 ;;
    *) return 1 ;;
  esac
}

backup_dirs() {

	declare s=$1; shift

  #
  # Check conn / dirs
  #
  declare dirs=""
  dirs=$(get_dirs $s)

  if [ "$?" != "0" ]; then
    echo "$s: connection failed"
    return 1
  fi

  if [ -z "$dirs" ]; then
    echo "$s: no directories found"
    return 1
  fi

  echo "$s: found: "$(echo "$dirs")

  #
  # Destination directory
  #
  declare dest_dir="$BACKUP_DIR/"
  if [ "$NO_SERVER_DIR" = "1" ]; then
    dest_dir="$BACKUP_DIR"
  else
    dest_dir="$BACKUP_DIR/$s"
  fi

  #
  # Check Lock
  #
  declare lock="$dest_dir/$s.lock"
	if [ "$DEBUG" = "0" -a "$DRY_RUN" = "0" ] && [ -e "$lock" ]; then

    declare pid=`cat "$lock"`

    if [[ -z `ps -p $pid | sed 1d` ]]; then
     echo "$s: WARN: delete old lock $lock, pid $pid is not running"
     rm "$lock"

    else
      echo "$s: ERR: $lock already exists!"
      return 2

    fi
	fi

  #
  # Create backup dir
  #
	if [ "$DEBUG" = "0" ] && ! [ -e $dest_dir ] && ! mkdir -p $dest_dir &>/dev/null; then
		echo "$s: ERR: can't create $dest_dir"
		return 5
	fi

  #
  # Create Lock
  #
	if [ "$DEBUG" = "0" -a "$DRY_RUN" = "0" ]; then
    if ! echo $$ > "$lock"; then
      echo "$s: ERR: Can't create $lock"
      return 2
    fi
	fi

  #
  # Dirs
  #
  declare ssh_dirs="" d="" ifs=$IFS

  #
  # dir -> server:dir
  #
  IFS=$'\n'
  for d in $(sed "s/\([' ]\)/\\\\\\1/g" <<< "$dirs"); do
    if is_locahost $s; then
      ssh_dirs="$ssh_dirs \"$d\""
    else
      ssh_dirs="$ssh_dirs $s:\"$d\""
    fi
    shift
  done
  IFS=$ifs

	declare cmd="$RSYNC $ssh_dirs \"$dest_dir/\""
  [[ $RUN_TIMEOUT -gt 0 ]] && cmd="perl -e 'alarm $RUN_TIMEOUT; exec @ARGV' -- $cmd"

  if [ "$DEBUG" -gt "0"  ]; then
    if [ "$DEBUG" -gt "1" ]; then
      echo "$s: $cmd"
    fi

  else
    declare start=`date +%s`
	  eval $cmd 2>&1 | perl -pe "BEGIN{$|=1} s/^(.)/$s: \$1/"
    echo "$s: rsync: "$((`date +%s`-$start))" seconds"

  fi

  #
  # Remove lock
  #
	if [ -e "$lock" ]; then
    [ "$DEBUG" = "0" -a "$DRY_RUN" = "0" ] && echo $s: $(rm -v "$lock")
  fi

  #
  # Tag file
  #
  [ "$DRY_RUN" = "0" -a "$DEBUG" = "0" ] && (
    echo "date    : $(date +'%F %T')
seconds : "$((`date +%s`-$start))"
host    : $s
rsync   : $(perl -pe "s/( --\w+| $s:)/\n\$1/g" <<< "$cmd")
";
  ) > "$dest_dir/BACKUP_SERVERS.LAST"

}
export -f backup_dirs

get_dirs() {
  declare s=$1; shift
  [ -z "$DIRS" ] && return 1

  declare cmd="ssh $SSH_OPT -q -o ConnectTimeout=$CONN_TIMEOUT $s"
  is_locahost $s && cmd="bash -c"

  declare exit=0;
  [ $DEBUG -gt 0 -o $DRY_RUN -gt 0 ] && exit=1
  [ $PKG_LIST = "" ] && exit=1
  #exit=0
  #echo "$exit: <$cmd>" 1>&2
  $cmd \
    "( \
ls -1d $DIRS; \
if [ $exit -gt 0 ]; then [ 1 ]; \
elif [ -x /usr/bin/dpkg ]; then /usr/bin/dpkg --get-selections &> /etc/backup_servers.pkg; \
elif [ -x /opt/local/bin/port ]; then /opt/local/bin/port installed &> /etc/backup_servers.pkg; \
fi; \
exit 0; \
)" 2>/dev/null

  return $?
}

parallelize() {
  declare pid=""
  while [ $# -gt 0 ] ; do
    jobcnt=(`jobs -p`)
    if [ ${#jobcnt[@]} -lt $PARALLEL ] ; then
      #$1
      $1 &
      pid=$!
      shift  
    fi
  done
  trap "{ kill -SIGKILL $pid ; exit 0; }" SIGINT
  wait
}

alarm() { perl -e 'alarm shift; exec @ARGV' -- $@; }
export -f alarm

log2err() {
  #exec perl -ne 'print if /(: ERR:|connection failed|no directories|Alarm clock\s+perl)/' $@
  exec grep -E '/(: ERR:|connection failed|no directories|Alarm clock\s+perl)/' $@
}

log2sql() {
  local today=$(date +%F)
  local server=$(hostname -s)
  cat <<EOF
CREATE TABLE IF NOT EXISTS backup_servers (
  server varchar(100),
  date DATE NOT NULL,
  host varchar(100) COLLATE NOCASE,
  files_transfer bigint DEFAULT 0,
  files_total bigint DEFAULT 0,
  bytes_transfer bigint DEFAULT 0,
  bytes_total bigint DEFAULT 0,
  time bigint DEFAULT 0,
  dirs text,
  PRIMARY KEY(server,date,host)
);
EOF
  log2csv $@ | tail -n +2 | perl -ne 'chomp($_); @_=split("\t",$_); unshift(@_,"'$server'","'$today'"); $_[8]=@_[8..(@_-1)]; foreach $i (qw(0 1 2 8)){$_[$i]=qq|"$_[$i]"|;}; print "REPLACE INTO backup_servers VALUES (".join(",",map {$_ eq "" ? "NULL" : $_} @_).");\n"'
  exit
}

log2csv() {
  declare total=0
  [ "$1" = "_total_" ] && total=1 && shift
  exec perl -ne '
BEGIN { %h = (); $total = shift @ARGV; $| = 1; }

print if $total;

/^(.*?): Number of files: ([\d,]+)/ and $h{$1}{files_total} = $2;
/^(.*?): Number of files transferred: ([\d,]+)/ and $h{$1}{files_transfer} = $2;

/^(.*?): Total file size: ([\d,]+)/ and $h{$1}{bytes_total} = $2;
/^(.*?): Total transferred file size: ([\d,]+)/ and $h{$1}{bytes_transfer} = $2;
/^(.*?): rsync: (\d+) sec/ and $h{$1}{time} = $2;
/^([^:]+): found: (.*?)\s*$/ and $h{$1}{dirs} = $2;

END {

  @f = qw/files_transfer files_total bytes_transfer bytes_total time dirs/;
  %tot = (map{$_ => 0} @f);
  print join("\t","host",@f)."\n" unless $total;

  while (my ($h,$d) = each(%h)) {

    for my $k (qw/files_total files_transfer bytes_total bytes_transfer time/) {
      $d->{$k} =~ s/\D//g;
      $d->{$k} ||= 0;
    }

    if ($total) {
      for (@f) { $tot{$_} += $d->{$_}; }
    } else {
      print join("\t",$h,map{$d->{$_}} @f)."\n";
    }

  }

  print "\n"
    ."-------------------------------------------\n"
    ."- Files transfered / total: ".$tot{files_transfer}." / ".$tot{files_total}."\n" 
    ."- Bytes transfered / total: ".$tot{bytes_transfer}." / ".$tot{bytes_total}."\n" 
  if $total;

}
' $total $@
} # << log2csv"

which realpath > /dev/null || realpath() {
	#perl -MFile::Spec -MCwd -e 'print File::Spec->rel2abs( Cwd::abs_path($ARGV[0]) )."\n" if -e $ARGV[0]' "$1"
	local pwd_bak=$PWD

	[ -e "$1" ] || return

	if [ -d "$1" ]; then
		cd "$1" || return
		pwd -P
	else

		local BASENAME="$(basename "$1")"
		local LINK=$(readlink "$BASENAME")
		cd "$(dirname "$1")"

		while [ "$LINK" ]; do
			cd "$(dirname "$LINK")"
			LINK=$(readlink "$BASENAME")
		done

		local DIR="$(pwd -P)"
		if [ "$DIR" = "/" ]; then
			echo "$DIR$BASENAME"
		else
			echo "$DIR/$BASENAME"
		fi

	fi

	cd "$pwd_bak"
}

#--------------------------------------
# Args
#--------------------------------------

CONF=""
ARGS="$@"
while [ $# -gt 0 ]; do

  case "$1" in

    --conf)
      shift
      CONF="$1"
      INC=$(realpath "$CONF")

      if [ ! -d "$CONF" ]; then
        cd "$(dirname $CONF)" || exit
        . "$INC" || exit
      fi

      # Pattern if start with *
      case "$2" in
        \**)
          CONF_PATTERN_DIR="$2"
          shift
        ;;
      esac

    ;;
    --nice) shift; NICE="$1" ;;
    --pattern) shift; CONF_PATTERN_DIR="$1" ;;
    --servers) shift; SERVERS="$1" ;;
    --dirs) shift; DIRS="$1" ;;
    --backup-dir) shift; BACKUP_DIR="$1" ;;
    --log2csv) shift; log2csv $@ ;;
    --log2sql) shift; log2sql $@ ;;
    --log2err) shift; log2err $@ ;;

    --conn-timeout) shift; CONN_TIMEOUT=$1 ;;
    --run-timeout) shift; RUN_TIMEOUT=$1 ;;
    --parallel) shift; PARALLEL=$1 ;;

    --ssh-opt) shift; SSH_OPT="$1" ;;
    --rsync-opt) shift; RSYNC_OPT="$1" ;;
    --dry-run|-n) DRY_RUN=1; RSYNC="$RSYNC --dry-run" ;;
    --du) DU="1" ;;
    --no-server-dir) NO_SERVER_DIR="1" ;;
    --no-du) DU="0" ;;
    --pkg-list) PKG_LIST="1" ;;
    --no-pkg-list) PKG_LIST="0" ;;

    -*help|-h) usage | pod2text --width 250; exit 0 ;;
    --man) usage | pod2man | man -l -; exit 0 ;;
    --verbose|-v) VERBOSE=$(($VERBOSE+1)) ;;
    --debug) DEBUG=$(($DEBUG+1)) ;;

    *) echo "$NAME: Unknow option: $1!"; exit -1; ;;

  esac
  shift
done

#
# Ssh
#
[ -z "$SSH_OPT" ] || SSH_OPT=" $SSH_OPT"
SSH_OPT="-oBatchMode=yes$SSH_OPT"

#
# Rsync options
#
[ "$VERBOSE" -gt 0 ] && RSYNC_OPT="$RSYNC_OPT $(seq $VERBOSE | xargs -n1 -IZ echo -v)"

[ "$NICE" = "0" ] && NICE=""
[ -n "$NICE" ] && RSYNC_OPT="$RSYNC_OPT --rsync-path='nice -n $NICE rsync'"

[ -z "$RSYNC_OPT" ] || RSYNC="$RSYNC $RSYNC_OPT"

#
# Rsync command
#
[ -n "$NICE" ] && RSYNC="nice -n $NICE $RSYNC"
RSYNC="$RSYNC -e 'ssh $SSH_OPT'"

#
# Source: SERVERS
# Desti.: DIRS
#
SERVERS=$(echo $SERVERS)
DIRS=$(echo $DIRS)

#
# Debug and exit
#
if [ "$DEBUG" -gt 2 ]; then
    echo "
RSYNC=\"$RSYNC\"
SSH_OPT=\"$SSH_OPT\"
CONN_TIMEOUT=\"$CONN_TIMEOUT\"
PARALLEL=\"$PARALLEL\"
DIRS=\"$DIRS\"
SERVERS=\"$SERVERS\"
"
  exit 0
fi

declare start=`date +%s`

#--------------------------------------
# DIR CONF
#--------------------------------------
if [ -d "$CONF" ]; then

  ARGS=${ARGS//--conf $CONF}

  echo "-=========================================="
  echo "-= Config directory: $CONF"
  echo "-=========================================="
  echo

  for file in "$CONF"/$CONF_PATTERN_DIR; do
    [ -f "$file" ] || continue

    name=$(basename "$file")
    name=${name%${CONF_PATTERN_DIR}}

    $0 --conf "$file" $ARGS
    echo
  done

  echo "-=========================================="
  echo "-= End: "$((`date +%s`-$start))" seconds, $(date +'%F %T')"
  echo "-=========================================="

  exit
fi
#exec echo ">$CONF"

#--------------------------------------
# MAIN
#--------------------------------------
if [ -z "$BACKUP_DIR" ]; then
  echo "$NAME: variable BACKUP_DIR is empty. Please use --backup-dir DIR. or --conf FILE|DIR" 1>&2
  exit 1
fi
cd "$BACKUP_DIR" || exit 1

declare count_server=0
declare cmds=""

for s in $SERVERS; do

  count_server=$(($count_server+1))

  cmds="$cmds \"backup_dirs $s\""

done

echo "-------------------------------------------"
echo "- Start: $(date +'%F %T'), $count_server servers, $PARALLEL parallel, $CONN_TIMEOUT sec conn timeout, $RUN_TIMEOUT sec run timeout"
echo "- Backup directory: $BACKUP_DIR"
[ -n "$CONF" ] && echo "- Config file: $CONF"
echo "-------------------------------------------"

if [ -n "$cmds" ]; then
  eval parallelize $cmds | log2csv _total_
fi

#echo
#echo "-------------------------------------------"
echo "- End: "$((`date +%s`-$start))" seconds, $(date +'%F %T')"
echo "-------------------------------------------"

#--------------------------------------
# Report
#--------------------------------------
if [ -n "$SERVERS" ] && [ "$DU" = "1" ]; then

  echo
  echo "-------------------------------------------"
  echo "- Report $BACKUP_DIR/ ($count_server servers)"
  echo "-------------------------------------------"
  cd "$BACKUP_DIR"
  du -sh --total --dereference-args $SERVERS
fi

#--------------------------------------
# Bye!
#--------------------------------------
exit 0
