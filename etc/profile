backup_servers_post_logs() {
  local i

  for i in $@; do
    local name=$(basename "$i")
    name=${name%.*}
    local date=$(awk -F': |, ' '$1 ~ /^[# -]+Start/{print $2}' "$i" 2>/dev/null)
    nb_api_post_host_info backup_servers.$name.log "$date"
  done

  backup_servers --log2csv $@ | awk -F '\t' 'nohead++{print $0}' | while read host files_transfer files_total bytes_transfer bytes_total time dirs
  do
    nb_api_post_host_info backup_servers.$host.files_transfer "$files_transfer"
    nb_api_post_host_info backup_servers.$host.files_total "$files_total"
    nb_api_post_host_info backup_servers.$host.bytes_transfer "$bytes_transfer"
    nb_api_post_host_info backup_servers.$host.bytes_total "$bytes_total"
    nb_api_post_host_info backup_servers.$host.time "$time"
    nb_api_post_host_info backup_servers.$host.dirs "$dirs"
  done
}

backup_servers_create_lock() {
  #
  # Check Lock
  #
  declare lock="${1:?Usage: backup_servers_create_lock LOCK_FILE}"
  declare preff; [ $# -gt 0 ] && preff="$2"

	if [ -e "$lock" ] ; then
  	declare pid=`cat "$lock"`

  	if [[ -z `ps -p $pid | sed 1d` ]]; then
   	 echo "${preff}WARN: delete old lock $lock, pid $pid is not running"
   	 rm "$lock"

  	else
    	echo "${preff}ERR: $lock already exists!"
    	return 2

  	fi
  fi

  if ! echo $$ > "$lock"; then
    echo "$s: ERR: Can't create $lock"
    return 2
  fi

  return 0
}

backup_servers_log_run_confs() {
	declare LOG_DIR="${1:?Usage: backup_servers_log_run_confs LOG_DIR CONF1 CONF2 ... Run *.conf files in current directory}"; shift
	[ -e "$LOG_DIR" ] || mkdir -vp "$LOG_DIR"

	local conf
	for conf in $@; do
		[ -e ${conf}.conf ] || continue
		#echo "$conf"; continue
		#echo backup_servers --conf ${conf}.conf --debug; continue

  	backup_servers_create_lock "$LOG_DIR/$conf.lock" || continue

		backup_servers --conf ${conf}.conf > $LOG_DIR/${conf}.log && \
			backup_servers_post_logs $LOG_DIR/${conf}.log >/dev/null 2>&1

		rm "$LOG_DIR/$conf.lock"
	done
}
